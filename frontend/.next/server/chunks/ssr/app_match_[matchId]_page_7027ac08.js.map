{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///mnt/c/Users/danny/afl-prediction-app/frontend/app/match/%5BmatchId%5D/page.js"],"sourcesContent":["\"use client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"next/navigation\";\r\nimport Link from \"next/link\";\r\nimport { Typography, Card, CardContent, Grid, CircularProgress, Alert, Button, Container, TextField, Box, FormControlLabel, Switch, FormGroup, FormControl, FormLabel, Checkbox, Accordion, AccordionSummary, AccordionDetails, AppBar, Toolbar } from \"@mui/material\";\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nexport default function MatchDetails() {\r\n  const { matchId } = useParams();\r\n  const [players, setPlayers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n  const [bettingThreshold, setBettingThreshold] = useState(75);\r\n  const [hideNoBetting, setHideNoBetting] = useState(true);\r\n  const [betTypes, setBetTypes] = useState([]);\r\n  const [selectedBetTypes, setSelectedBetTypes] = useState([]);\r\n  const [teams, setTeams] = useState([]);\r\n  const [selectedTeams, setSelectedTeams] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!matchId) return;\r\n    fetch(`/api/getPlayerPredictions?matchId=${matchId}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setPlayers(Array.isArray(data) ? data : [data]);\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setError(\"Failed to load player predictions\");\r\n        setLoading(false);\r\n      });\r\n  }, [matchId]);\r\n\r\n  // Get all unique bet types and teams from players\r\n  useEffect(() => {\r\n    if (!players || players.length === 0) return;\r\n    const allTypes = new Set();\r\n    const allTeams = new Set();\r\n    players.forEach(player => {\r\n      player.bettingOpportunities?.forEach(bet => {\r\n        if (bet.market) allTypes.add(bet.market);\r\n      });\r\n      if (player.team) allTeams.add(player.team);\r\n    });\r\n    setBetTypes(Array.from(allTypes));\r\n    setTeams(Array.from(allTeams));\r\n  }, [players]);\r\n\r\n  // Track which bet types are selected\r\n  useEffect(() => {\r\n    setSelectedBetTypes(betTypes);\r\n  }, [betTypes]);\r\n\r\n  // Track which teams are selected\r\n  useEffect(() => {\r\n    setSelectedTeams(teams);\r\n  }, [teams]);\r\n\r\n  const handleBetTypeChange = (type) => {\r\n    setSelectedBetTypes(prev =>\r\n      prev.includes(type)\r\n        ? prev.filter(t => t !== type)\r\n        : [...prev, type]\r\n    );\r\n  };\r\n\r\n  const handleTeamChange = (team) => {\r\n    setSelectedTeams(prev =>\r\n      prev.includes(team)\r\n        ? prev.filter(t => t !== team)\r\n        : [...prev, team]\r\n    );\r\n  };\r\n\r\n  // Filtering logic\r\n  const filteredPlayers = players.filter(player => {\r\n    const nameMatch = player.player.toLowerCase().includes(nameFilter.toLowerCase());\r\n    if (!nameMatch) return false;\r\n    if (!selectedTeams.includes(player.team)) return false;\r\n    if (hideNoBetting && (!player.bettingOpportunities || player.bettingOpportunities.length === 0)) return false;\r\n    if (!player.bettingOpportunities || player.bettingOpportunities.length === 0) return true;\r\n    // Only consider bets matching selected types\r\n    const filteredBets = player.bettingOpportunities.filter(bet => selectedBetTypes.includes(bet.market));\r\n    // Show if any filtered betting opportunity is >= threshold\r\n    return filteredBets.some(bet => (bet.probability * 100) >= bettingThreshold);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            AFL Predictions\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container sx={{ mt: 4 }}>\r\n        <Button component={Link} href=\"/\" sx={{ mb: 2 }}>&larr; Back to Matches</Button>\r\n        <Typography variant=\"h4\" gutterBottom>Player Predictions</Typography>\r\n        {/* Filters section */}\r\n        <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap', alignItems: 'center' }}>\r\n          <TextField\r\n            label=\"Filter by player name\"\r\n            value={nameFilter}\r\n            onChange={e => setNameFilter(e.target.value)}\r\n            size=\"small\"\r\n          />\r\n          <TextField\r\n            label=\"Min. Betting Opportunity (%)\"\r\n            type=\"number\"\r\n            value={bettingThreshold}\r\n            onChange={e => setBettingThreshold(Number(e.target.value))}\r\n            size=\"small\"\r\n            inputProps={{ min: 0, max: 100 }}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={hideNoBetting}\r\n                onChange={e => setHideNoBetting(e.target.checked)}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Hide players with no betting opportunities\"\r\n          />\r\n          {betTypes.length > 0 && (\r\n            <FormControl component=\"fieldset\" sx={{ minWidth: 200 }}>\r\n              <FormLabel component=\"legend\">Betting Types</FormLabel>\r\n              <FormGroup row>\r\n                {betTypes.map(type => (\r\n                  <FormControlLabel\r\n                    key={type}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={selectedBetTypes.includes(type)}\r\n                        onChange={() => handleBetTypeChange(type)}\r\n                      />\r\n                    }\r\n                    label={type}\r\n                  />\r\n                ))}\r\n              </FormGroup>\r\n              {teams.length > 0 && (\r\n                <FormControl component=\"fieldset\" sx={{ minWidth: 150, mt: 2 }}>\r\n                  <FormLabel component=\"legend\">Team</FormLabel>\r\n                  <FormGroup row>\r\n                    {teams.map(team => (\r\n                      <FormControlLabel\r\n                        key={team}\r\n                        control={\r\n                          <Checkbox\r\n                            checked={selectedTeams.includes(team)}\r\n                            onChange={() => handleTeamChange(team)}\r\n                          />\r\n                        }\r\n                        label={team}\r\n                      />\r\n                    ))}\r\n                  </FormGroup>\r\n                </FormControl>\r\n              )}\r\n            </FormControl>\r\n          )}\r\n        </Box>\r\n        {loading && <CircularProgress />}\r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n        <Grid container spacing={2}>\r\n          {filteredPlayers.map(player => (\r\n            <Grid item xs={12} md={6} key={player.id}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\">{player.player} ({player.team})</Typography>\r\n                  <Typography color=\"text.secondary\">vs {player.opposition} @ {player.venue}</Typography>\r\n                  <Typography sx={{ mt: 1 }}>Predicted Disposals: {player.predictions?.disposals}</Typography>\r\n                  <Typography>Predicted Goals: {player.predictions?.goals}</Typography>\r\n                  <Typography>Predicted Supercoach: {player.predictions?.supercoach}</Typography>\r\n                  {/* Betting opportunities */}\r\n                  {player.bettingOpportunities && player.bettingOpportunities.length > 0 && (\r\n                    <div style={{ marginTop: 12 }}>\r\n                      <Typography variant=\"subtitle2\">Betting Opportunities:</Typography>\r\n                      {player.bettingOpportunities.map((bet, idx) => (\r\n                        <Typography key={idx} sx={{ ml: 2 }}>\r\n                          {bet.market}: <b>{Math.round(bet.probability * 100)}%</b> ({bet.strength})\r\n                        </Typography>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  {/* Expandable marketProbabilities */}\r\n                  {player.marketProbabilities && Object.keys(player.marketProbabilities).length > 0 && (\r\n                    <Accordion sx={{ mt: 2 }}>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography>Show all market probabilities</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        {Object.entries(player.marketProbabilities).map(([market, prob], idx) => (\r\n                          <Typography key={idx} sx={{ ml: 2 }}>\r\n                            {market}: <b>{Math.round(prob * 100)}%</b>\r\n                          </Typography>\r\n                        ))}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n} "],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;;;;;;;AAOe,SAAS;IACtB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAC5B,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC3D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACrC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAErD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS;QACd,MAAM,CAAC,kCAAkC,EAAE,SAAS,EACjD,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,IACpB,IAAI,CAAC,CAAA;YACJ,WAAW,MAAM,OAAO,CAAC,QAAQ,OAAO;gBAAC;aAAK;YAC9C,WAAW;QACb,GACC,KAAK,CAAC;YACL,SAAS;YACT,WAAW;QACb;IACJ,GAAG;QAAC;KAAQ;IAEZ,kDAAkD;IAClD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;QACtC,MAAM,WAAW,IAAI;QACrB,MAAM,WAAW,IAAI;QACrB,QAAQ,OAAO,CAAC,CAAA;YACd,OAAO,oBAAoB,EAAE,QAAQ,CAAA;gBACnC,IAAI,IAAI,MAAM,EAAE,SAAS,GAAG,CAAC,IAAI,MAAM;YACzC;YACA,IAAI,OAAO,IAAI,EAAE,SAAS,GAAG,CAAC,OAAO,IAAI;QAC3C;QACA,YAAY,MAAM,IAAI,CAAC;QACvB,SAAS,MAAM,IAAI,CAAC;IACtB,GAAG;QAAC;KAAQ;IAEZ,qCAAqC;IACrC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,oBAAoB;IACtB,GAAG;QAAC;KAAS;IAEb,iCAAiC;IACjC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,iBAAiB;IACnB,GAAG;QAAC;KAAM;IAEV,MAAM,sBAAsB,CAAC;QAC3B,oBAAoB,CAAA,OAClB,KAAK,QAAQ,CAAC,QACV,KAAK,MAAM,CAAC,CAAA,IAAK,MAAM,QACvB;mBAAI;gBAAM;aAAK;IAEvB;IAEA,MAAM,mBAAmB,CAAC;QACxB,iBAAiB,CAAA,OACf,KAAK,QAAQ,CAAC,QACV,KAAK,MAAM,CAAC,CAAA,IAAK,MAAM,QACvB;mBAAI;gBAAM;aAAK;IAEvB;IAEA,kBAAkB;IAClB,MAAM,kBAAkB,QAAQ,MAAM,CAAC,CAAA;QACrC,MAAM,YAAY,OAAO,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,WAAW;QAC7E,IAAI,CAAC,WAAW,OAAO;QACvB,IAAI,CAAC,cAAc,QAAQ,CAAC,OAAO,IAAI,GAAG,OAAO;QACjD,IAAI,iBAAiB,CAAC,CAAC,OAAO,oBAAoB,IAAI,OAAO,oBAAoB,CAAC,MAAM,KAAK,CAAC,GAAG,OAAO;QACxG,IAAI,CAAC,OAAO,oBAAoB,IAAI,OAAO,oBAAoB,CAAC,MAAM,KAAK,GAAG,OAAO;QACrF,6CAA6C;QAC7C,MAAM,eAAe,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAA,MAAO,iBAAiB,QAAQ,CAAC,IAAI,MAAM;QACnG,2DAA2D;QAC3D,OAAO,aAAa,IAAI,CAAC,CAAA,MAAO,AAAC,IAAI,WAAW,GAAG,OAAQ;IAC7D;IAEA,qBACE;;0BACE,8OAAC,iMAAA,CAAA,SAAM;gBAAC,UAAS;0BACf,cAAA,8OAAC,oMAAA,CAAA,UAAO;8BACN,cAAA,8OAAC,6MAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,WAAU;wBAAM,IAAI;4BAAE,UAAU;wBAAE;kCAAG;;;;;;;;;;;;;;;;0BAKlE,8OAAC,0MAAA,CAAA,YAAS;gBAAC,IAAI;oBAAE,IAAI;gBAAE;;kCACrB,8OAAC,iMAAA,CAAA,SAAM;wBAAC,WAAW,4JAAA,CAAA,UAAI;wBAAE,MAAK;wBAAI,IAAI;4BAAE,IAAI;wBAAE;kCAAG;;;;;;kCACjD,8OAAC,6MAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,YAAY;kCAAC;;;;;;kCAEtC,8OAAC,wLAAA,CAAA,MAAG;wBAAC,IAAI;4BAAE,SAAS;4BAAQ,KAAK;4BAAG,IAAI;4BAAG,UAAU;4BAAQ,YAAY;wBAAS;;0CAChF,8OAAC,0MAAA,CAAA,YAAS;gCACR,OAAM;gCACN,OAAO;gCACP,UAAU,CAAA,IAAK,cAAc,EAAE,MAAM,CAAC,KAAK;gCAC3C,MAAK;;;;;;0CAEP,8OAAC,0MAAA,CAAA,YAAS;gCACR,OAAM;gCACN,MAAK;gCACL,OAAO;gCACP,UAAU,CAAA,IAAK,oBAAoB,OAAO,EAAE,MAAM,CAAC,KAAK;gCACxD,MAAK;gCACL,YAAY;oCAAE,KAAK;oCAAG,KAAK;gCAAI;;;;;;0CAEjC,8OAAC,+NAAA,CAAA,mBAAgB;gCACf,uBACE,8OAAC,iMAAA,CAAA,SAAM;oCACL,SAAS;oCACT,UAAU,CAAA,IAAK,iBAAiB,EAAE,MAAM,CAAC,OAAO;oCAChD,OAAM;;;;;;gCAGV,OAAM;;;;;;4BAEP,SAAS,MAAM,GAAG,mBACjB,8OAAC,gNAAA,CAAA,cAAW;gCAAC,WAAU;gCAAW,IAAI;oCAAE,UAAU;gCAAI;;kDACpD,8OAAC,0MAAA,CAAA,YAAS;wCAAC,WAAU;kDAAS;;;;;;kDAC9B,8OAAC,0MAAA,CAAA,YAAS;wCAAC,GAAG;kDACX,SAAS,GAAG,CAAC,CAAA,qBACZ,8OAAC,+NAAA,CAAA,mBAAgB;gDAEf,uBACE,8OAAC,uMAAA,CAAA,WAAQ;oDACP,SAAS,iBAAiB,QAAQ,CAAC;oDACnC,UAAU,IAAM,oBAAoB;;;;;;gDAGxC,OAAO;+CAPF;;;;;;;;;;oCAWV,MAAM,MAAM,GAAG,mBACd,8OAAC,gNAAA,CAAA,cAAW;wCAAC,WAAU;wCAAW,IAAI;4CAAE,UAAU;4CAAK,IAAI;wCAAE;;0DAC3D,8OAAC,0MAAA,CAAA,YAAS;gDAAC,WAAU;0DAAS;;;;;;0DAC9B,8OAAC,0MAAA,CAAA,YAAS;gDAAC,GAAG;0DACX,MAAM,GAAG,CAAC,CAAA,qBACT,8OAAC,+NAAA,CAAA,mBAAgB;wDAEf,uBACE,8OAAC,uMAAA,CAAA,WAAQ;4DACP,SAAS,cAAc,QAAQ,CAAC;4DAChC,UAAU,IAAM,iBAAiB;;;;;;wDAGrC,OAAO;uDAPF;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBpB,yBAAW,8OAAC,+NAAA,CAAA,mBAAgB;;;;;oBAC5B,uBAAS,8OAAC,8LAAA,CAAA,QAAK;wBAAC,UAAS;kCAAS;;;;;;kCACnC,8OAAC,2LAAA,CAAA,OAAI;wBAAC,SAAS;wBAAC,SAAS;kCACtB,gBAAgB,GAAG,CAAC,CAAA,uBACnB,8OAAC,2LAAA,CAAA,OAAI;gCAAC,IAAI;gCAAC,IAAI;gCAAI,IAAI;0CACrB,cAAA,8OAAC,2LAAA,CAAA,OAAI;8CACH,cAAA,8OAAC,gNAAA,CAAA,cAAW;;0DACV,8OAAC,6MAAA,CAAA,aAAU;gDAAC,SAAQ;;oDAAM,OAAO,MAAM;oDAAC;oDAAG,OAAO,IAAI;oDAAC;;;;;;;0DACvD,8OAAC,6MAAA,CAAA,aAAU;gDAAC,OAAM;;oDAAiB;oDAAI,OAAO,UAAU;oDAAC;oDAAI,OAAO,KAAK;;;;;;;0DACzE,8OAAC,6MAAA,CAAA,aAAU;gDAAC,IAAI;oDAAE,IAAI;gDAAE;;oDAAG;oDAAsB,OAAO,WAAW,EAAE;;;;;;;0DACrE,8OAAC,6MAAA,CAAA,aAAU;;oDAAC;oDAAkB,OAAO,WAAW,EAAE;;;;;;;0DAClD,8OAAC,6MAAA,CAAA,aAAU;;oDAAC;oDAAuB,OAAO,WAAW,EAAE;;;;;;;4CAEtD,OAAO,oBAAoB,IAAI,OAAO,oBAAoB,CAAC,MAAM,GAAG,mBACnE,8OAAC;gDAAI,OAAO;oDAAE,WAAW;gDAAG;;kEAC1B,8OAAC,6MAAA,CAAA,aAAU;wDAAC,SAAQ;kEAAY;;;;;;oDAC/B,OAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC,KAAK,oBACrC,8OAAC,6MAAA,CAAA,aAAU;4DAAW,IAAI;gEAAE,IAAI;4DAAE;;gEAC/B,IAAI,MAAM;gEAAC;8EAAE,8OAAC;;wEAAG,KAAK,KAAK,CAAC,IAAI,WAAW,GAAG;wEAAK;;;;;;;gEAAK;gEAAG,IAAI,QAAQ;gEAAC;;2DAD1D;;;;;;;;;;;4CAOtB,OAAO,mBAAmB,IAAI,OAAO,IAAI,CAAC,OAAO,mBAAmB,EAAE,MAAM,GAAG,mBAC9E,8OAAC,0MAAA,CAAA,YAAS;gDAAC,IAAI;oDAAE,IAAI;gDAAE;;kEACrB,8OAAC,+NAAA,CAAA,mBAAgB;wDAAC,0BAAY,8OAAC,+JAAA,CAAA,UAAc;;;;;kEAC3C,cAAA,8OAAC,6MAAA,CAAA,aAAU;sEAAC;;;;;;;;;;;kEAEd,8OAAC,+NAAA,CAAA,mBAAgB;kEACd,OAAO,OAAO,CAAC,OAAO,mBAAmB,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,oBAC/D,8OAAC,6MAAA,CAAA,aAAU;gEAAW,IAAI;oEAAE,IAAI;gEAAE;;oEAC/B;oEAAO;kFAAE,8OAAC;;4EAAG,KAAK,KAAK,CAAC,OAAO;4EAAK;;;;;;;;+DADtB;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA3BA,OAAO,EAAE;;;;;;;;;;;;;;;;;;AA0CpD","debugId":null}}]
}