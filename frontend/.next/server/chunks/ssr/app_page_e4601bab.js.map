{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///mnt/c/Users/danny/afl-prediction-app/frontend/app/page.js"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { Typography, Card, CardContent, Grid, CircularProgress, Alert, Button, Container, AppBar, Toolbar, FormControl, InputLabel, Select, MenuItem, Box } from \"@mui/material\";\n\nexport default function Home() {\n  const [matches, setMatches] = useState([]);\n  const [filteredMatches, setFilteredMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedRound, setSelectedRound] = useState('upcoming');\n  const [availableRounds, setAvailableRounds] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api/getTeamPredictions\")\n      .then(res => res.json())\n      .then(data => {\n        let arr = Array.isArray(data) ? data : [data];\n        // Sort by matchDate (start time)\n        arr = arr.sort((a, b) => new Date(a.matchDate) - new Date(b.matchDate));\n        setMatches(arr);\n        \n        // Extract unique rounds and sort them\n        const rounds = [...new Set(arr.map(match => match.round))].sort((a, b) => a - b);\n        setAvailableRounds(rounds);\n        \n        setLoading(false);\n      })\n      .catch(() => {\n        setError(\"Failed to load matches\");\n        setLoading(false);\n      });\n  }, []);\n\n  // Filter matches based on selected round\n  useEffect(() => {\n    if (selectedRound === 'upcoming') {\n      // Show only matches that haven't started yet\n      const now = new Date();\n      const upcoming = matches.filter(match => new Date(match.matchDate) > now);\n      setFilteredMatches(upcoming);\n    } else if (selectedRound === 'all') {\n      setFilteredMatches(matches);\n    } else {\n      // Filter by specific round\n      const filtered = matches.filter(match => match.round === parseInt(selectedRound));\n      setFilteredMatches(filtered);\n    }\n  }, [matches, selectedRound]);\n\n  const formatDateTime = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            AFL Predictions\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container sx={{ mt: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>AFL Matches</Typography>\n        \n        <Box sx={{ mb: 3, minWidth: 200 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"round-filter-label\">Round Filter</InputLabel>\n            <Select\n              labelId=\"round-filter-label\"\n              id=\"round-filter\"\n              value={selectedRound}\n              label=\"Round Filter\"\n              onChange={(e) => setSelectedRound(e.target.value)}\n            >\n              <MenuItem value=\"upcoming\">Upcoming Matches</MenuItem>\n              <MenuItem value=\"all\">All Matches</MenuItem>\n              {availableRounds.map(round => (\n                <MenuItem key={round} value={round}>Round {round}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n\n        {loading && <CircularProgress />}\n        {error && <Alert severity=\"error\">{error}</Alert>}\n        <Grid container spacing={2}>\n          {filteredMatches.map(match => (\n            <Grid item xs={12} md={6} key={match.matchId}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\">\n                    {match.homeTeam} vs {match.awayTeam}\n                  </Typography>\n                  <Typography color=\"text.secondary\">\n                    {match.venue} â€” {match.matchDate}\n                  </Typography>\n                  {/* Team predictions details */}\n                  {typeof match.homeWinProbability !== 'undefined' && typeof match.awayWinProbability !== 'undefined' && (\n                    <Typography sx={{ mt: 1 }}>\n                      {match.homeTeam} win probability: <b>{Math.round(match.homeWinProbability * 100)}%</b><br />\n                      {match.awayTeam} win probability: <b>{Math.round(match.awayWinProbability * 100)}%</b>\n                    </Typography>\n                  )}\n                  {typeof match.predictedWinner !== 'undefined' && (\n                    <Typography>\n                      Predicted winner: <b>{match.predictedWinner}</b>\n                    </Typography>\n                  )}\n                  {/* Add total score and line predictions */}\n                  {typeof match.predictedTotal !== 'undefined' && (\n                    <Typography>\n                      Predicted total score: <b>{Math.round(match.predictedTotal)}</b>\n                    </Typography>\n                  )}\n                  {typeof match.predictedMargin !== 'undefined' && (\n                    <Typography>\n                      Predicted margin (line): <b>{Math.round(match.predictedMargin)}</b>\n                    </Typography>\n                  )}\n\n                  <Button\n                    component={Link}\n                    href={`/match/${match.matchId}`}\n                    variant=\"contained\"\n                    sx={{ mt: 2 }}\n                  >\n                    View Player Predictions\n                  </Button>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}